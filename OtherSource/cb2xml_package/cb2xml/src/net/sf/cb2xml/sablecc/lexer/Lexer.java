/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.cb2xml.sablecc.lexer;

import java.io.*;
import java.util.*;
import net.sf.cb2xml.sablecc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TWhiteSpaces(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new2(int line, int pos) { return new TDot(line, pos); }
    Token new3(int line, int pos) { return new TComma(line, pos); }
    Token new4(int line, int pos) { return new TSlash(line, pos); }
    Token new5(int line, int pos) { return new TPlus(line, pos); }
    Token new6(int line, int pos) { return new TMinus(line, pos); }
    Token new7(int line, int pos) { return new TStar(line, pos); }
    Token new8(int line, int pos) { return new TDollar(line, pos); }
    Token new9(int line, int pos) { return new TLparen(line, pos); }
    Token new10(int line, int pos) { return new TRparen(line, pos); }
    Token new11(String text, int line, int pos) { return new TNumber88(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TNumberNot88(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TAlphanumericLiteral(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TNumericLiteral(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TDotZee(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TDotMinus(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TDotPlus(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TAll(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TAre(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TAscending(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TBinary(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TBy(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TCharacter(text, line, pos); }
    Token new25(String text, int line, int pos) { return new TComp(text, line, pos); }
    Token new26(String text, int line, int pos) { return new TComp1(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TComp2(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TComp3(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TComp4(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TComp5(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TComp6(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TDate(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TDepending(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TDescending(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TDisplay(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TDisplay1(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TExternal(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TFiller(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TFormat(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TFunctionPointer(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TGlobal(text, line, pos); }
    Token new42(String text, int line, int pos) { return new THighValues(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TIndex(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TIndexed(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TIs(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TJustified(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TKey(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TLeading(text, line, pos); }
    Token new49(String text, int line, int pos) { return new TLeft(text, line, pos); }
    Token new50(String text, int line, int pos) { return new TLowValues(text, line, pos); }
    Token new51(String text, int line, int pos) { return new TNational(text, line, pos); }
    Token new52(String text, int line, int pos) { return new TNative(text, line, pos); }
    Token new53(String text, int line, int pos) { return new TNulls(text, line, pos); }
    Token new54(String text, int line, int pos) { return new TObject(text, line, pos); }
    Token new55(String text, int line, int pos) { return new TOccurs(text, line, pos); }
    Token new56(String text, int line, int pos) { return new TOn(text, line, pos); }
    Token new57(String text, int line, int pos) { return new TPackedDecimal(text, line, pos); }
    Token new58(String text, int line, int pos) { return new TPicture(text, line, pos); }
    Token new59(String text, int line, int pos) { return new TPointer(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TProcedurePointer(text, line, pos); }
    Token new61(String text, int line, int pos) { return new TQuotes(text, line, pos); }
    Token new62(String text, int line, int pos) { return new TRedefines(text, line, pos); }
    Token new63(String text, int line, int pos) { return new TReference(text, line, pos); }
    Token new64(String text, int line, int pos) { return new TRenames(text, line, pos); }
    Token new65(String text, int line, int pos) { return new TRight(text, line, pos); }
    Token new66(String text, int line, int pos) { return new TSeparate(text, line, pos); }
    Token new67(String text, int line, int pos) { return new TSign(text, line, pos); }
    Token new68(String text, int line, int pos) { return new TSpaces(text, line, pos); }
    Token new69(String text, int line, int pos) { return new TSynchronized(text, line, pos); }
    Token new70(String text, int line, int pos) { return new TThrough(text, line, pos); }
    Token new71(String text, int line, int pos) { return new TTimes(text, line, pos); }
    Token new72(String text, int line, int pos) { return new TTo(text, line, pos); }
    Token new73(String text, int line, int pos) { return new TTrailing(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TUsage(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TValue(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TValues(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TWhen(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TZeros(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TDataName(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TUnknown(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{0, 8, 1}, {9, 9, 2}, {10, 10, 3}, {11, 12, 1}, {13, 13, 4}, {14, 31, 1}, {32, 32, 5}, {33, 33, 1}, {34, 34, 6}, {35, 35, 1}, {36, 36, 7}, {37, 38, 1}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 55, 17}, {56, 56, 18}, {57, 57, 17}, {58, 64, 1}, {65, 65, 19}, {66, 66, 20}, {67, 67, 21}, {68, 68, 22}, {69, 69, 23}, {70, 70, 24}, {71, 71, 25}, {72, 72, 26}, {73, 73, 27}, {74, 74, 28}, {75, 75, 29}, {76, 76, 30}, {77, 77, 31}, {78, 78, 32}, {79, 79, 33}, {80, 80, 34}, {81, 81, 35}, {82, 82, 36}, {83, 83, 37}, {84, 84, 38}, {85, 85, 39}, {86, 86, 40}, {87, 87, 41}, {88, 88, 42}, {89, 89, 31}, {90, 90, 43}, {91, 94, 1}, {95, 95, 44}, {96, 96, 1}, {97, 97, 45}, {98, 98, 46}, {99, 99, 47}, {100, 100, 48}, {101, 101, 49}, {102, 102, 50}, {103, 103, 51}, {104, 104, 52}, {105, 105, 53}, {106, 106, 54}, {107, 107, 55}, {108, 108, 56}, {109, 109, 57}, {110, 110, 58}, {111, 111, 59}, {112, 112, 60}, {113, 113, 61}, {114, 114, 62}, {115, 115, 63}, {116, 116, 64}, {117, 117, 65}, {118, 118, 66}, {119, 119, 67}, {120, 121, 57}, {122, 122, 68}, {123, 65535, 1}, },
            {},
            {{9, 9, 69}, {10, 10, 70}, {13, 13, 71}, {32, 32, 72}, },
            {{9, 32, -4}, },
            {{9, 9, 69}, {10, 10, 73}, {13, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 9, 74}, {10, 10, 75}, {11, 12, 74}, {13, 13, 76}, {14, 33, 74}, {34, 34, 77}, {35, 65535, 74}, },
            {},
            {{0, 9, 78}, {10, 10, 79}, {11, 12, 78}, {13, 13, 80}, {14, 38, 78}, {39, 39, 81}, {40, 65535, 78}, },
            {},
            {},
            {{0, 9, 82}, {10, 10, 83}, {11, 12, 82}, {13, 13, 84}, {14, 65535, 82}, },
            {{46, 46, 85}, {48, 57, 86}, },
            {},
            {{45, 45, 87}, {46, 46, 85}, {48, 57, 88}, {65, 90, 89}, {95, 95, 90}, {97, 122, 91}, },
            {{45, 45, 92}, {48, 57, 93}, {90, 90, 94}, },
            {},
            {{45, 46, -16}, {48, 57, 95}, {65, 122, -16}, },
            {{45, 46, -16}, {48, 55, 95}, {56, 56, 96}, {57, 57, 95}, {65, 122, -16}, },
            {{45, 45, 87}, {48, 57, 97}, {65, 75, 89}, {76, 76, 98}, {77, 81, 89}, {82, 82, 99}, {83, 83, 100}, {84, 90, 89}, {95, 95, 90}, {97, 107, 91}, {108, 108, 101}, {109, 113, 91}, {114, 114, 102}, {115, 115, 103}, {116, 122, 91}, },
            {{45, 57, -21}, {65, 72, 89}, {73, 73, 104}, {74, 75, 89}, {76, 76, 105}, {77, 88, 89}, {89, 89, 106}, {90, 90, 89}, {95, 95, 90}, {97, 104, 91}, {105, 105, 107}, {106, 107, 91}, {108, 108, 108}, {109, 120, 91}, {121, 121, 109}, {122, 122, 91}, },
            {{45, 57, -21}, {65, 71, 89}, {72, 72, 110}, {73, 78, 89}, {79, 79, 111}, {80, 90, 89}, {95, 95, 90}, {97, 103, 91}, {104, 104, 112}, {105, 110, 91}, {111, 111, 113}, {112, 122, 91}, },
            {{45, 57, -21}, {65, 65, 114}, {66, 68, 89}, {69, 69, 115}, {70, 72, 89}, {73, 73, 116}, {74, 90, 89}, {95, 95, 90}, {97, 97, 117}, {98, 100, 91}, {101, 101, 118}, {102, 104, 91}, {105, 105, 119}, {106, 122, 91}, },
            {{45, 57, -21}, {65, 87, 89}, {88, 88, 120}, {89, 90, 89}, {95, 95, 90}, {97, 119, 91}, {120, 120, 121}, {121, 122, 91}, },
            {{45, 72, -22}, {73, 73, 122}, {74, 78, 89}, {79, 79, 123}, {80, 84, 89}, {85, 85, 124}, {86, 90, 89}, {95, 104, -22}, {105, 105, 125}, {106, 110, 91}, {111, 111, 126}, {112, 116, 91}, {117, 117, 127}, {118, 122, 91}, },
            {{45, 75, -21}, {76, 76, 128}, {77, 90, 89}, {95, 107, -21}, {108, 108, 129}, {109, 122, 91}, },
            {{45, 72, -22}, {73, 73, 130}, {74, 95, -24}, {97, 104, 91}, {105, 105, 131}, {106, 122, 91}, },
            {{45, 57, -21}, {65, 77, 89}, {78, 78, 132}, {79, 82, 89}, {83, 83, 133}, {84, 95, -21}, {97, 109, 91}, {110, 110, 134}, {111, 114, 91}, {115, 115, 135}, {116, 122, 91}, },
            {{45, 57, -21}, {65, 84, 89}, {85, 85, 136}, {86, 95, -26}, {97, 116, 91}, {117, 117, 137}, {118, 122, 91}, },
            {{45, 57, -21}, {65, 68, 89}, {69, 69, 138}, {70, 90, 89}, {95, 95, 90}, {97, 100, 91}, {101, 101, 139}, {102, 122, 91}, },
            {{45, 68, -31}, {69, 69, 140}, {70, 78, 89}, {79, 79, 141}, {80, 95, -23}, {97, 100, 91}, {101, 101, 142}, {102, 110, 91}, {111, 111, 143}, {112, 122, 91}, },
            {{45, 57, -21}, {65, 122, -16}, },
            {{45, 57, -21}, {65, 65, 144}, {66, 84, 89}, {85, 85, 145}, {86, 95, -26}, {97, 97, 146}, {98, 116, 91}, {117, 117, 147}, {118, 122, 91}, },
            {{45, 57, -21}, {65, 65, 89}, {66, 66, 148}, {67, 67, 149}, {68, 77, 89}, {78, 78, 150}, {79, 90, 89}, {95, 95, 90}, {97, 97, 91}, {98, 98, 151}, {99, 99, 152}, {100, 109, 91}, {110, 110, 153}, {111, 122, 91}, },
            {{45, 57, -21}, {65, 65, 154}, {66, 72, 89}, {73, 73, 155}, {74, 78, 89}, {79, 79, 156}, {80, 81, 89}, {82, 82, 157}, {83, 90, 89}, {95, 95, 90}, {97, 97, 158}, {98, 104, 91}, {105, 105, 159}, {106, 110, 91}, {111, 111, 160}, {112, 113, 91}, {114, 114, 161}, {115, 122, 91}, },
            {{45, 84, -30}, {85, 85, 162}, {86, 116, -30}, {117, 117, 163}, {118, 122, 91}, },
            {{45, 68, -31}, {69, 69, 164}, {70, 72, 89}, {73, 73, 165}, {74, 95, -24}, {97, 100, 91}, {101, 101, 166}, {102, 104, 91}, {105, 105, 167}, {106, 122, 91}, },
            {{45, 68, -31}, {69, 69, 168}, {70, 72, 89}, {73, 73, 169}, {74, 79, 89}, {80, 80, 170}, {81, 88, 89}, {89, 89, 171}, {90, 95, -22}, {97, 100, 91}, {101, 101, 172}, {102, 104, 91}, {105, 105, 173}, {106, 111, 91}, {112, 112, 174}, {113, 120, 91}, {121, 121, 175}, {122, 122, 91}, },
            {{45, 71, -23}, {72, 72, 176}, {73, 73, 177}, {74, 78, 89}, {79, 79, 178}, {80, 81, 89}, {82, 82, 179}, {83, 95, -36}, {97, 103, 91}, {104, 104, 180}, {105, 105, 181}, {106, 110, 91}, {111, 111, 182}, {112, 113, 91}, {114, 114, 183}, {115, 122, 91}, },
            {{45, 57, -21}, {65, 82, 89}, {83, 83, 184}, {84, 95, -21}, {97, 114, 91}, {115, 115, 185}, {116, 122, 91}, },
            {{45, 57, -21}, {65, 65, 186}, {66, 90, 89}, {95, 95, 90}, {97, 97, 187}, {98, 122, 91}, },
            {{45, 71, -23}, {72, 72, 188}, {73, 90, 89}, {95, 103, -23}, {104, 104, 189}, {105, 122, 91}, },
            {{34, 34, 190}, {39, 39, 191}, {45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 192}, {70, 100, -31}, {101, 101, 193}, {102, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -21}, },
            {{45, 122, -22}, },
            {{45, 122, -23}, },
            {{45, 122, -24}, },
            {{45, 122, -25}, },
            {{45, 122, -26}, },
            {{45, 122, -27}, },
            {{45, 122, -28}, },
            {{45, 122, -29}, },
            {{45, 122, -30}, },
            {{45, 122, -31}, },
            {{45, 122, -32}, },
            {{45, 122, -33}, },
            {{45, 122, -34}, },
            {{45, 122, -35}, },
            {{45, 122, -36}, },
            {{45, 122, -37}, },
            {{45, 122, -38}, },
            {{45, 122, -39}, },
            {{45, 122, -40}, },
            {{45, 122, -41}, },
            {{45, 122, -42}, },
            {{45, 122, -43}, },
            {{45, 122, -45}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{9, 32, -6}, },
            {{9, 32, -4}, },
            {{9, 32, -4}, },
            {{0, 65535, -8}, },
            {{0, 8, 74}, {9, 9, 194}, {10, 10, 195}, {11, 12, 74}, {13, 13, 196}, {14, 31, 74}, {32, 32, 197}, {33, 33, 74}, {34, 34, 77}, {35, 44, 74}, {45, 45, 198}, {46, 65535, 74}, },
            {{0, 9, -77}, {10, 10, 199}, {11, 65535, -77}, },
            {{34, 34, 200}, },
            {{0, 65535, -10}, },
            {{0, 8, 78}, {9, 9, 201}, {10, 10, 202}, {11, 12, 78}, {13, 13, 203}, {14, 31, 78}, {32, 32, 204}, {33, 38, 78}, {39, 39, 81}, {40, 44, 78}, {45, 45, 205}, {46, 65535, 78}, },
            {{0, 9, -81}, {10, 10, 206}, {11, 65535, -81}, },
            {{39, 39, 207}, },
            {{0, 65535, -13}, },
            {},
            {{10, 10, 208}, },
            {{48, 57, 93}, },
            {{46, 57, -14}, },
            {{45, 122, -33}, },
            {{45, 122, -16}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 92}, },
            {{48, 57, 93}, {69, 69, 209}, },
            {{90, 90, 94}, },
            {{45, 122, -19}, },
            {{45, 122, -19}, },
            {{45, 122, -33}, },
            {{45, 75, -21}, {76, 76, 210}, {77, 107, -27}, {108, 108, 211}, {109, 122, 91}, },
            {{45, 68, -31}, {69, 69, 212}, {70, 100, -31}, {101, 101, 213}, {102, 122, 91}, },
            {{45, 57, -21}, {65, 66, 89}, {67, 67, 214}, {68, 90, 89}, {95, 95, 90}, {97, 98, 91}, {99, 99, 215}, {100, 122, 91}, },
            {{45, 122, -100}, },
            {{45, 122, -101}, },
            {{45, 122, -102}, },
            {{45, 77, -29}, {78, 78, 216}, {79, 95, -35}, {97, 109, 91}, {110, 110, 217}, {111, 122, 91}, },
            {{45, 57, -21}, {65, 65, 218}, {66, 95, -42}, {97, 97, 219}, {98, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -106}, },
            {{45, 122, -107}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 220}, {66, 95, -42}, {97, 97, 221}, {98, 122, 91}, },
            {{45, 57, -21}, {65, 76, 89}, {77, 77, 222}, {78, 90, 89}, {95, 95, 90}, {97, 108, 91}, {109, 109, 223}, {110, 122, 91}, },
            {{45, 122, -112}, },
            {{45, 122, -113}, },
            {{45, 57, -21}, {65, 83, 89}, {84, 84, 224}, {85, 90, 89}, {95, 95, 90}, {97, 115, 91}, {116, 116, 225}, {117, 122, 91}, },
            {{45, 57, -21}, {65, 79, 89}, {80, 80, 226}, {81, 82, 89}, {83, 83, 227}, {84, 95, -21}, {97, 111, 91}, {112, 112, 228}, {113, 114, 91}, {115, 115, 229}, {116, 122, 91}, },
            {{45, 82, -41}, {83, 83, 230}, {84, 114, -41}, {115, 115, 231}, {116, 122, 91}, },
            {{45, 122, -116}, },
            {{45, 122, -117}, },
            {{45, 122, -118}, },
            {{45, 83, -116}, {84, 84, 232}, {85, 115, -116}, {116, 116, 233}, {117, 122, 91}, },
            {{45, 122, -122}, },
            {{45, 75, -21}, {76, 76, 234}, {77, 107, -27}, {108, 108, 235}, {109, 122, 91}, },
            {{45, 57, -21}, {65, 81, 89}, {82, 82, 236}, {83, 95, -36}, {97, 113, 91}, {114, 114, 237}, {115, 122, 91}, },
            {{45, 77, -29}, {78, 78, 238}, {79, 109, -106}, {110, 110, 239}, {111, 122, 91}, },
            {{45, 122, -124}, },
            {{45, 122, -125}, },
            {{45, 122, -126}, },
            {{45, 57, -21}, {65, 78, 89}, {79, 79, 240}, {80, 95, -23}, {97, 110, 91}, {111, 111, 241}, {112, 122, 91}, },
            {{45, 122, -130}, },
            {{45, 57, -21}, {65, 70, 89}, {71, 71, 242}, {72, 90, 89}, {95, 95, 90}, {97, 102, 91}, {103, 103, 243}, {104, 122, 91}, },
            {{45, 122, -132}, },
            {{45, 57, -21}, {65, 67, 89}, {68, 68, 244}, {69, 90, 89}, {95, 95, 90}, {97, 99, 91}, {100, 100, 245}, {101, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -134}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 246}, {84, 114, -41}, {115, 115, 247}, {116, 122, 91}, },
            {{45, 122, -138}, },
            {{45, 57, -21}, {65, 88, 89}, {89, 89, 248}, {90, 95, -22}, {97, 120, 91}, {121, 121, 249}, {122, 122, 91}, },
            {{45, 122, -140}, },
            {{45, 57, -21}, {65, 65, 250}, {66, 69, 89}, {70, 70, 251}, {71, 90, 89}, {95, 95, 90}, {97, 97, 252}, {98, 101, 91}, {102, 102, 253}, {103, 122, 91}, },
            {{45, 57, -21}, {65, 86, 89}, {87, 87, 254}, {88, 90, 89}, {95, 95, 90}, {97, 118, 91}, {119, 119, 255}, {120, 122, 91}, },
            {{45, 122, -142}, },
            {{45, 122, -143}, },
            {{45, 83, -116}, {84, 84, 256}, {85, 115, -116}, {116, 116, 257}, {117, 122, 91}, },
            {{45, 75, -21}, {76, 76, 258}, {77, 107, -27}, {108, 108, 259}, {109, 122, 91}, },
            {{45, 122, -146}, },
            {{45, 122, -147}, },
            {{45, 57, -21}, {65, 73, 89}, {74, 74, 260}, {75, 90, 89}, {95, 95, 90}, {97, 105, 91}, {106, 106, 261}, {107, 122, 91}, },
            {{45, 66, -102}, {67, 67, 262}, {68, 98, -102}, {99, 99, 263}, {100, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -150}, },
            {{45, 122, -151}, },
            {{45, 122, -33}, },
            {{45, 66, -102}, {67, 67, 264}, {68, 98, -102}, {99, 99, 265}, {100, 122, 91}, },
            {{45, 66, -102}, {67, 67, 266}, {68, 98, -102}, {99, 99, 267}, {100, 122, 91}, },
            {{45, 72, -22}, {73, 73, 268}, {74, 104, -28}, {105, 105, 269}, {106, 122, 91}, },
            {{45, 78, -130}, {79, 79, 270}, {80, 110, -130}, {111, 111, 271}, {112, 122, 91}, },
            {{45, 122, -156}, },
            {{45, 122, -157}, },
            {{45, 122, -158}, },
            {{45, 122, -159}, },
            {{45, 78, -130}, {79, 79, 272}, {80, 110, -130}, {111, 111, 273}, {112, 122, 91}, },
            {{45, 122, -164}, },
            {{45, 67, -134}, {68, 68, 274}, {69, 69, 89}, {70, 70, 275}, {71, 77, 89}, {78, 78, 276}, {79, 95, -35}, {97, 99, 91}, {100, 100, 277}, {101, 101, 91}, {102, 102, 278}, {103, 109, 91}, {110, 110, 279}, {111, 122, 91}, },
            {{45, 70, -132}, {71, 71, 280}, {72, 102, -132}, {103, 103, 281}, {104, 122, 91}, },
            {{45, 122, -166}, },
            {{45, 122, -167}, },
            {{45, 79, -117}, {80, 80, 282}, {81, 90, 89}, {95, 111, -117}, {112, 112, 283}, {113, 122, 91}, },
            {{45, 70, -132}, {71, 71, 284}, {72, 102, -132}, {103, 103, 285}, {104, 122, 91}, },
            {{45, 57, -21}, {65, 65, 286}, {66, 95, -42}, {97, 97, 287}, {98, 122, 91}, },
            {{45, 77, -29}, {78, 78, 288}, {79, 109, -106}, {110, 110, 289}, {111, 122, 91}, },
            {{45, 122, -170}, },
            {{45, 122, -171}, },
            {{45, 122, -172}, },
            {{45, 122, -173}, },
            {{45, 81, -125}, {82, 82, 290}, {83, 113, -125}, {114, 114, 291}, {115, 122, 91}, },
            {{45, 76, -113}, {77, 77, 292}, {78, 108, -113}, {109, 109, 293}, {110, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 294}, {66, 95, -42}, {97, 97, 295}, {98, 122, 91}, },
            {{45, 122, -178}, },
            {{45, 122, -179}, },
            {{45, 122, -33}, },
            {{45, 122, -181}, },
            {{45, 57, -21}, {65, 65, 296}, {66, 95, -42}, {97, 97, 297}, {98, 122, 91}, },
            {{45, 122, -186}, },
            {{45, 75, -21}, {76, 76, 298}, {77, 107, -27}, {108, 108, 299}, {109, 122, 91}, },
            {{45, 122, -188}, },
            {{45, 68, -31}, {69, 69, 300}, {70, 100, -31}, {101, 101, 301}, {102, 122, 91}, },
            {{45, 122, -190}, },
            {{48, 57, 302}, {65, 70, 303}, {97, 102, 304}, },
            {{48, 57, 305}, {65, 70, 306}, {97, 102, 307}, },
            {{45, 81, -125}, {82, 82, 308}, {83, 113, -125}, {114, 114, 309}, {115, 122, 91}, },
            {{45, 122, -194}, },
            {{0, 34, -8}, {35, 65535, -77}, },
            {{0, 65535, -77}, },
            {{0, 9, -77}, {10, 10, 310}, {11, 65535, -77}, },
            {{0, 65535, -196}, },
            {{0, 8, 74}, {9, 9, 311}, {10, 10, 312}, {11, 12, 74}, {13, 13, 313}, {14, 31, 74}, {32, 32, 314}, {33, 34, -77}, {35, 65535, 74}, },
            {{0, 65535, -77}, },
            {{0, 65535, -8}, },
            {{0, 39, -10}, {40, 65535, -81}, },
            {{0, 65535, -81}, },
            {{0, 9, -81}, {10, 10, 315}, {11, 65535, -81}, },
            {{0, 65535, -203}, },
            {{0, 8, 78}, {9, 9, 316}, {10, 10, 317}, {11, 12, 78}, {13, 13, 318}, {14, 31, 78}, {32, 32, 319}, {33, 39, -81}, {40, 65535, 78}, },
            {{0, 65535, -81}, },
            {{0, 65535, -10}, },
            {},
            {{43, 43, 320}, {45, 45, 321}, {48, 57, 322}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 323}, {70, 100, -31}, {101, 101, 324}, {102, 122, 91}, },
            {{45, 122, -216}, },
            {{45, 57, -21}, {65, 65, 325}, {66, 95, -42}, {97, 97, 326}, {98, 122, 91}, },
            {{45, 122, -218}, },
            {{45, 77, -29}, {78, 78, 327}, {79, 109, -106}, {110, 110, 328}, {111, 122, 91}, },
            {{45, 122, -220}, },
            {{45, 81, -125}, {82, 82, 329}, {83, 113, -125}, {114, 114, 330}, {115, 122, 91}, },
            {{45, 122, -222}, },
            {{45, 79, -117}, {80, 80, 331}, {81, 111, -170}, {112, 112, 332}, {113, 122, 91}, },
            {{45, 122, -224}, },
            {{45, 68, -31}, {69, 69, 333}, {70, 100, -31}, {101, 101, 334}, {102, 122, 91}, },
            {{45, 122, -226}, },
            {{45, 68, -31}, {69, 69, 335}, {70, 100, -31}, {101, 101, 336}, {102, 122, 91}, },
            {{45, 66, -102}, {67, 67, 337}, {68, 98, -102}, {99, 99, 338}, {100, 122, 91}, },
            {{45, 122, -228}, },
            {{45, 122, -229}, },
            {{45, 79, -117}, {80, 80, 339}, {81, 111, -170}, {112, 112, 340}, {113, 122, 91}, },
            {{45, 122, -232}, },
            {{45, 68, -31}, {69, 69, 341}, {70, 100, -31}, {101, 101, 342}, {102, 122, 91}, },
            {{45, 122, -234}, },
            {{45, 75, -21}, {76, 76, 343}, {77, 107, -27}, {108, 108, 344}, {109, 122, 91}, },
            {{45, 122, -236}, },
            {{45, 76, -113}, {77, 77, 345}, {78, 108, -113}, {109, 109, 346}, {110, 122, 91}, },
            {{45, 122, -238}, },
            {{45, 66, -102}, {67, 67, 347}, {68, 98, -102}, {99, 99, 348}, {100, 122, 91}, },
            {{45, 122, -240}, },
            {{45, 65, -35}, {66, 66, 349}, {67, 90, 89}, {95, 97, -35}, {98, 98, 350}, {99, 122, 91}, },
            {{45, 122, -242}, },
            {{45, 71, -23}, {72, 72, 351}, {73, 103, -43}, {104, 104, 352}, {105, 122, 91}, },
            {{45, 122, -244}, },
            {{45, 68, -31}, {69, 69, 353}, {70, 100, -31}, {101, 101, 354}, {102, 122, 91}, },
            {{45, 122, -246}, },
            {{45, 83, -116}, {84, 84, 355}, {85, 115, -116}, {116, 116, 356}, {117, 122, 91}, },
            {{45, 122, -248}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 67, -134}, {68, 68, 357}, {69, 99, -134}, {100, 100, 358}, {101, 122, 91}, },
            {{45, 83, -116}, {84, 84, 359}, {85, 115, -116}, {116, 116, 360}, {117, 122, 91}, },
            {{45, 122, -252}, },
            {{45, 122, -253}, },
            {{45, 45, 361}, {48, 122, -33}, },
            {{45, 122, -256}, },
            {{45, 72, -22}, {73, 73, 362}, {74, 104, -28}, {105, 105, 363}, {106, 122, 91}, },
            {{45, 122, -258}, },
            {{45, 75, -21}, {76, 76, 364}, {77, 107, -27}, {108, 108, 365}, {109, 122, 91}, },
            {{45, 122, -260}, },
            {{45, 68, -31}, {69, 69, 366}, {70, 100, -31}, {101, 101, 367}, {102, 122, 91}, },
            {{45, 122, -262}, },
            {{45, 84, -30}, {85, 85, 368}, {86, 116, -30}, {117, 117, 369}, {118, 122, 91}, },
            {{45, 122, -264}, },
            {{45, 57, -21}, {65, 74, 89}, {75, 75, 370}, {76, 90, 89}, {95, 95, 90}, {97, 106, 91}, {107, 107, 371}, {108, 122, 91}, },
            {{45, 122, -266}, },
            {{45, 83, -116}, {84, 84, 372}, {85, 115, -116}, {116, 116, 373}, {117, 122, 91}, },
            {{45, 122, -268}, },
            {{45, 77, -29}, {78, 78, 374}, {79, 109, -106}, {110, 110, 375}, {111, 122, 91}, },
            {{45, 122, -270}, },
            {{45, 66, -102}, {67, 67, 376}, {68, 98, -102}, {99, 99, 377}, {100, 122, 91}, },
            {{45, 122, -272}, },
            {{45, 83, -116}, {84, 84, 378}, {85, 115, -116}, {116, 116, 379}, {117, 122, 91}, },
            {{45, 122, -274}, },
            {{45, 68, -31}, {69, 69, 380}, {70, 100, -31}, {101, 101, 381}, {102, 122, 91}, },
            {{45, 68, -31}, {69, 69, 382}, {70, 100, -31}, {101, 101, 383}, {102, 122, 91}, },
            {{45, 57, -21}, {65, 65, 384}, {66, 95, -42}, {97, 97, 385}, {98, 122, 91}, },
            {{45, 122, -276}, },
            {{45, 122, -277}, },
            {{45, 122, -278}, },
            {{45, 71, -23}, {72, 72, 386}, {73, 103, -43}, {104, 104, 387}, {105, 122, 91}, },
            {{45, 122, -282}, },
            {{45, 57, -21}, {65, 65, 388}, {66, 95, -42}, {97, 97, 389}, {98, 122, 91}, },
            {{45, 122, -284}, },
            {{45, 77, -29}, {78, 78, 390}, {79, 109, -106}, {110, 110, 391}, {111, 122, 91}, },
            {{45, 122, -286}, },
            {{45, 66, -102}, {67, 67, 392}, {68, 98, -102}, {99, 99, 393}, {100, 122, 91}, },
            {{45, 122, -288}, },
            {{45, 66, -102}, {67, 67, 394}, {68, 98, -102}, {99, 99, 395}, {100, 122, 91}, },
            {{45, 122, -290}, },
            {{45, 78, -130}, {79, 79, 396}, {80, 84, 89}, {85, 85, 397}, {86, 95, -26}, {97, 110, 91}, {111, 111, 398}, {112, 116, 91}, {117, 117, 399}, {118, 122, 91}, },
            {{45, 122, -292}, },
            {{45, 68, -31}, {69, 69, 400}, {70, 100, -31}, {101, 101, 401}, {102, 122, 91}, },
            {{45, 122, -294}, },
            {{45, 72, -22}, {73, 73, 402}, {74, 104, -28}, {105, 105, 403}, {106, 122, 91}, },
            {{45, 122, -296}, },
            {{45, 70, -132}, {71, 71, 404}, {72, 102, -132}, {103, 103, 405}, {104, 122, 91}, },
            {{45, 122, -298}, },
            {{45, 84, -30}, {85, 85, 406}, {86, 116, -30}, {117, 117, 407}, {118, 122, 91}, },
            {{45, 122, -300}, },
            {{45, 77, -29}, {78, 78, 408}, {79, 109, -106}, {110, 110, 409}, {111, 122, 91}, },
            {{45, 122, -302}, },
            {{48, 57, 410}, {65, 70, 411}, {97, 102, 412}, },
            {{48, 102, -304}, },
            {{48, 102, -304}, },
            {{48, 57, 413}, {65, 70, 414}, {97, 102, 415}, },
            {{48, 102, -307}, },
            {{48, 102, -307}, },
            {{45, 78, -130}, {79, 79, 416}, {80, 110, -130}, {111, 111, 417}, {112, 122, 91}, },
            {{45, 122, -310}, },
            {{0, 65535, -77}, },
            {{0, 33, -200}, {34, 34, 418}, {35, 65535, 74}, },
            {{0, 8, 74}, {9, 9, 419}, {10, 10, 420}, {11, 12, 74}, {13, 13, 421}, {14, 31, 74}, {32, 32, 422}, {33, 34, -313}, {35, 65535, -77}, },
            {{0, 9, -314}, {10, 10, 423}, {11, 65535, -314}, },
            {{0, 65535, -313}, },
            {{0, 65535, -81}, },
            {{0, 38, -207}, {39, 39, 424}, {40, 65535, 78}, },
            {{0, 8, 78}, {9, 9, 425}, {10, 10, 426}, {11, 12, 78}, {13, 13, 427}, {14, 31, 78}, {32, 32, 428}, {33, 39, -318}, {40, 65535, -81}, },
            {{0, 9, -319}, {10, 10, 429}, {11, 65535, -319}, },
            {{0, 65535, -318}, },
            {{48, 57, 322}, },
            {{48, 57, 322}, },
            {{48, 57, 322}, },
            {{45, 77, -29}, {78, 78, 430}, {79, 109, -106}, {110, 110, 431}, {111, 122, 91}, },
            {{45, 122, -325}, },
            {{45, 81, -125}, {82, 82, 432}, {83, 113, -125}, {114, 114, 433}, {115, 122, 91}, },
            {{45, 122, -327}, },
            {{45, 74, -266}, {75, 75, 434}, {76, 106, -266}, {107, 107, 435}, {108, 122, 91}, },
            {{45, 122, -329}, },
            {{45, 57, -21}, {65, 65, 436}, {66, 95, -42}, {97, 97, 437}, {98, 122, 91}, },
            {{45, 122, -331}, },
            {{45, 45, 438}, {48, 84, -30}, {85, 85, 439}, {86, 116, -30}, {117, 117, 440}, {118, 122, 91}, },
            {{45, 122, -333}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 441}, {79, 109, -106}, {110, 110, 442}, {111, 122, 91}, },
            {{45, 122, -337}, },
            {{45, 68, -31}, {69, 69, 443}, {70, 100, -31}, {101, 101, 444}, {102, 122, 91}, },
            {{45, 122, -339}, },
            {{45, 75, -21}, {76, 76, 445}, {77, 107, -27}, {108, 108, 446}, {109, 122, 91}, },
            {{45, 122, -341}, },
            {{45, 81, -125}, {82, 82, 447}, {83, 113, -125}, {114, 114, 448}, {115, 122, 91}, },
            {{45, 122, -343}, },
            {{45, 68, -31}, {69, 69, 449}, {70, 100, -31}, {101, 101, 450}, {102, 122, 91}, },
            {{45, 122, -345}, },
            {{45, 57, -21}, {65, 65, 451}, {66, 95, -42}, {97, 97, 452}, {98, 122, 91}, },
            {{45, 122, -347}, },
            {{45, 83, -116}, {84, 84, 453}, {85, 115, -116}, {116, 116, 454}, {117, 122, 91}, },
            {{45, 122, -349}, },
            {{45, 57, -21}, {65, 65, 455}, {66, 95, -42}, {97, 97, 456}, {98, 122, 91}, },
            {{45, 122, -351}, },
            {{45, 45, 457}, {48, 122, -33}, },
            {{45, 122, -353}, },
            {{45, 87, -25}, {88, 88, 458}, {89, 119, -25}, {120, 120, 459}, {121, 122, 91}, },
            {{45, 122, -355}, },
            {{45, 72, -22}, {73, 73, 460}, {74, 104, -28}, {105, 105, 461}, {106, 122, 91}, },
            {{45, 122, -357}, },
            {{45, 72, -22}, {73, 73, 462}, {74, 104, -28}, {105, 105, 463}, {106, 122, 91}, },
            {{45, 122, -359}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 85, 89}, {86, 86, 464}, {87, 90, 89}, {95, 95, 90}, {97, 117, 91}, {118, 118, 465}, {119, 122, 91}, },
            {{45, 78, -130}, {79, 79, 466}, {80, 85, 89}, {86, 86, 467}, {87, 95, -363}, {97, 110, 91}, {111, 111, 468}, {112, 117, 91}, {118, 118, 469}, {119, 122, 91}, },
            {{45, 122, -364}, },
            {{45, 82, -41}, {83, 83, 470}, {84, 114, -41}, {115, 115, 471}, {116, 122, 91}, },
            {{45, 122, -366}, },
            {{45, 66, -102}, {67, 67, 472}, {68, 98, -102}, {99, 99, 473}, {100, 122, 91}, },
            {{45, 122, -368}, },
            {{45, 81, -125}, {82, 82, 474}, {83, 113, -125}, {114, 114, 475}, {115, 122, 91}, },
            {{45, 122, -370}, },
            {{45, 68, -31}, {69, 69, 476}, {70, 100, -31}, {101, 101, 477}, {102, 122, 91}, },
            {{45, 122, -372}, },
            {{45, 84, -30}, {85, 85, 478}, {86, 116, -30}, {117, 117, 479}, {118, 122, 91}, },
            {{45, 122, -374}, },
            {{45, 83, -116}, {84, 84, 480}, {85, 115, -116}, {116, 116, 481}, {117, 122, 91}, },
            {{45, 122, -376}, },
            {{45, 68, -31}, {69, 69, 482}, {70, 100, -31}, {101, 101, 483}, {102, 122, 91}, },
            {{45, 122, -378}, },
            {{45, 68, -31}, {69, 69, 484}, {70, 100, -31}, {101, 101, 485}, {102, 122, 91}, },
            {{45, 122, -380}, },
            {{45, 57, -21}, {65, 69, 89}, {70, 70, 486}, {71, 95, -142}, {97, 101, 91}, {102, 102, 487}, {103, 122, 91}, },
            {{45, 122, -382}, },
            {{45, 81, -125}, {82, 82, 488}, {83, 113, -125}, {114, 114, 489}, {115, 122, 91}, },
            {{45, 122, -384}, },
            {{45, 76, -113}, {77, 77, 490}, {78, 108, -113}, {109, 109, 491}, {110, 122, 91}, },
            {{45, 122, -386}, },
            {{45, 83, -116}, {84, 84, 492}, {85, 115, -116}, {116, 116, 493}, {117, 122, 91}, },
            {{45, 122, -388}, },
            {{45, 81, -125}, {82, 82, 494}, {83, 113, -125}, {114, 114, 495}, {115, 122, 91}, },
            {{45, 122, -390}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 496}, {70, 100, -31}, {101, 101, 497}, {102, 122, 91}, },
            {{45, 122, -394}, },
            {{45, 71, -23}, {72, 72, 498}, {73, 103, -43}, {104, 104, 499}, {105, 122, 91}, },
            {{45, 122, -396}, },
            {{45, 84, -30}, {85, 85, 500}, {86, 116, -30}, {117, 117, 501}, {118, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -398}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 502}, {84, 114, -41}, {115, 115, 503}, {116, 122, 91}, },
            {{45, 122, -402}, },
            {{45, 75, -21}, {76, 76, 504}, {77, 107, -27}, {108, 108, 505}, {109, 122, 91}, },
            {{45, 122, -404}, },
            {{45, 68, -31}, {69, 69, 506}, {70, 100, -31}, {101, 101, 507}, {102, 122, 91}, },
            {{45, 122, -406}, },
            {{45, 68, -31}, {69, 69, 508}, {70, 100, -31}, {101, 101, 509}, {102, 122, 91}, },
            {{45, 122, -408}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{34, 34, 510}, {48, 102, -192}, },
            {{34, 102, -412}, },
            {{34, 102, -412}, },
            {{39, 39, 511}, {48, 102, -193}, },
            {{39, 102, -415}, },
            {{39, 102, -415}, },
            {{45, 68, -31}, {69, 69, 512}, {70, 82, 89}, {83, 83, 513}, {84, 95, -21}, {97, 100, 91}, {101, 101, 514}, {102, 114, 91}, {115, 115, 515}, {116, 122, 91}, },
            {{45, 122, -418}, },
            {{0, 33, -8}, {34, 34, 516}, {35, 65535, 74}, },
            {{0, 34, -313}, {35, 65535, -77}, },
            {{0, 65535, -314}, },
            {{0, 9, -314}, {10, 10, 517}, {11, 65535, -314}, },
            {{0, 65535, -421}, },
            {{0, 65535, -314}, },
            {{0, 38, -10}, {39, 39, 518}, {40, 65535, 78}, },
            {{0, 39, -318}, {40, 65535, -81}, },
            {{0, 65535, -319}, },
            {{0, 9, -319}, {10, 10, 519}, {11, 65535, -319}, },
            {{0, 65535, -427}, },
            {{0, 65535, -319}, },
            {{45, 67, -134}, {68, 68, 520}, {69, 99, -134}, {100, 100, 521}, {101, 122, 91}, },
            {{45, 122, -432}, },
            {{45, 88, -140}, {89, 89, 522}, {90, 120, -140}, {121, 121, 523}, {122, 122, 91}, },
            {{45, 122, -434}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 66, -102}, {67, 67, 524}, {68, 98, -102}, {99, 99, 525}, {100, 122, 91}, },
            {{45, 122, -438}, },
            {{45, 45, 87}, {48, 48, 97}, {49, 49, 526}, {50, 50, 527}, {51, 51, 528}, {52, 52, 529}, {53, 53, 530}, {54, 54, 531}, {55, 57, 97}, {65, 122, -16}, },
            {{45, 83, -116}, {84, 84, 532}, {85, 115, -116}, {116, 116, 533}, {117, 122, 91}, },
            {{45, 122, -441}, },
            {{45, 67, -134}, {68, 68, 534}, {69, 99, -134}, {100, 100, 535}, {101, 122, 91}, },
            {{45, 122, -443}, },
            {{45, 77, -29}, {78, 78, 536}, {79, 109, -106}, {110, 110, 537}, {111, 122, 91}, },
            {{45, 122, -445}, },
            {{45, 57, -21}, {65, 65, 538}, {66, 95, -42}, {97, 97, 539}, {98, 122, 91}, },
            {{45, 122, -447}, },
            {{45, 77, -29}, {78, 78, 540}, {79, 109, -106}, {110, 110, 541}, {111, 122, 91}, },
            {{45, 122, -449}, },
            {{45, 81, -125}, {82, 82, 542}, {83, 113, -125}, {114, 114, 543}, {115, 122, 91}, },
            {{45, 122, -451}, },
            {{45, 83, -116}, {84, 84, 544}, {85, 115, -116}, {116, 116, 545}, {117, 122, 91}, },
            {{45, 122, -453}, },
            {{45, 72, -22}, {73, 73, 546}, {74, 104, -28}, {105, 105, 547}, {106, 122, 91}, },
            {{45, 122, -455}, },
            {{45, 75, -21}, {76, 76, 548}, {77, 107, -27}, {108, 108, 549}, {109, 122, 91}, },
            {{45, 122, -457}, },
            {{45, 85, -363}, {86, 86, 550}, {87, 117, -363}, {118, 118, 551}, {119, 122, 91}, },
            {{45, 68, -31}, {69, 69, 552}, {70, 100, -31}, {101, 101, 553}, {102, 122, 91}, },
            {{45, 122, -460}, },
            {{45, 69, -382}, {70, 70, 554}, {71, 101, -382}, {102, 102, 555}, {103, 122, 91}, },
            {{45, 122, -462}, },
            {{45, 77, -29}, {78, 78, 556}, {79, 109, -106}, {110, 110, 557}, {111, 122, 91}, },
            {{45, 122, -464}, },
            {{45, 57, -21}, {65, 65, 558}, {66, 95, -42}, {97, 97, 559}, {98, 122, 91}, },
            {{45, 122, -466}, },
            {{45, 77, -29}, {78, 78, 560}, {79, 109, -106}, {110, 110, 561}, {111, 122, 91}, },
            {{45, 68, -31}, {69, 69, 562}, {70, 100, -31}, {101, 101, 563}, {102, 122, 91}, },
            {{45, 122, -468}, },
            {{45, 122, -469}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -116}, {84, 84, 564}, {85, 115, -116}, {116, 116, 565}, {117, 122, 91}, },
            {{45, 122, -474}, },
            {{45, 82, -41}, {83, 83, 566}, {84, 114, -41}, {115, 115, 567}, {116, 122, 91}, },
            {{45, 122, -476}, },
            {{45, 67, -134}, {68, 68, 568}, {69, 99, -134}, {100, 100, 569}, {101, 122, 91}, },
            {{45, 122, -478}, },
            {{45, 81, -125}, {82, 82, 570}, {83, 113, -125}, {114, 114, 571}, {115, 122, 91}, },
            {{45, 122, -480}, },
            {{45, 68, -31}, {69, 69, 572}, {70, 100, -31}, {101, 101, 573}, {102, 122, 91}, },
            {{45, 122, -482}, },
            {{45, 67, -134}, {68, 68, 574}, {69, 99, -134}, {100, 100, 575}, {101, 122, 91}, },
            {{45, 122, -484}, },
            {{45, 82, -41}, {83, 83, 576}, {84, 114, -41}, {115, 115, 577}, {116, 122, 91}, },
            {{45, 122, -486}, },
            {{45, 72, -22}, {73, 73, 578}, {74, 104, -28}, {105, 105, 579}, {106, 122, 91}, },
            {{45, 122, -488}, },
            {{45, 68, -31}, {69, 69, 580}, {70, 100, -31}, {101, 101, 581}, {102, 122, 91}, },
            {{45, 122, -490}, },
            {{45, 68, -31}, {69, 69, 582}, {70, 100, -31}, {101, 101, 583}, {102, 122, 91}, },
            {{45, 122, -492}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 584}, {66, 95, -42}, {97, 97, 585}, {98, 122, 91}, },
            {{45, 122, -496}, },
            {{45, 82, -41}, {83, 83, 586}, {84, 114, -41}, {115, 115, 587}, {116, 122, 91}, },
            {{45, 122, -498}, },
            {{45, 81, -125}, {82, 82, 588}, {83, 113, -125}, {114, 114, 589}, {115, 122, 91}, },
            {{45, 122, -500}, },
            {{45, 70, -132}, {71, 71, 590}, {72, 102, -132}, {103, 103, 591}, {104, 122, 91}, },
            {{45, 122, -502}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 592}, {74, 104, -28}, {105, 105, 593}, {106, 122, 91}, },
            {{45, 122, -506}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 594}, {84, 114, -41}, {115, 115, 595}, {116, 122, 91}, },
            {{45, 122, -510}, },
            {},
            {},
            {{45, 82, -41}, {83, 83, 596}, {84, 114, -41}, {115, 115, 597}, {116, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -514}, },
            {{45, 122, -33}, },
            {{0, 65535, -420}, },
            {{0, 65535, -314}, },
            {{0, 65535, -426}, },
            {{0, 65535, -319}, },
            {{45, 72, -22}, {73, 73, 598}, {74, 104, -28}, {105, 105, 599}, {106, 122, 91}, },
            {{45, 122, -522}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -116}, {84, 84, 600}, {85, 115, -116}, {116, 116, 601}, {117, 122, 91}, },
            {{45, 122, -526}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 602}, {66, 95, -42}, {97, 97, 603}, {98, 122, 91}, },
            {{45, 122, -534}, },
            {{45, 72, -22}, {73, 73, 604}, {74, 104, -28}, {105, 105, 605}, {106, 122, 91}, },
            {{45, 122, -536}, },
            {{45, 67, -134}, {68, 68, 606}, {69, 99, -134}, {100, 100, 607}, {101, 122, 91}, },
            {{45, 122, -538}, },
            {{45, 88, -140}, {89, 89, 608}, {90, 120, -140}, {121, 121, 609}, {122, 122, 91}, },
            {{45, 122, -540}, },
            {{45, 57, -21}, {65, 65, 610}, {66, 95, -42}, {97, 97, 611}, {98, 122, 91}, },
            {{45, 122, -542}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -130}, {79, 79, 612}, {80, 110, -130}, {111, 111, 613}, {112, 122, 91}, },
            {{45, 122, -548}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 65, 614}, {66, 95, -42}, {97, 97, 615}, {98, 122, 91}, },
            {{45, 122, -552}, },
            {{45, 67, -134}, {68, 68, 616}, {69, 99, -134}, {100, 100, 617}, {101, 122, 91}, },
            {{45, 122, -554}, },
            {{45, 72, -22}, {73, 73, 618}, {74, 104, -28}, {105, 105, 619}, {106, 122, 91}, },
            {{45, 122, -556}, },
            {{45, 70, -132}, {71, 71, 620}, {72, 102, -132}, {103, 103, 621}, {104, 122, 91}, },
            {{45, 122, -558}, },
            {{45, 75, -21}, {76, 76, 622}, {77, 107, -27}, {108, 108, 623}, {109, 122, 91}, },
            {{45, 122, -560}, },
            {{45, 57, -21}, {65, 65, 624}, {66, 95, -42}, {97, 97, 625}, {98, 122, 91}, },
            {{45, 122, -562}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 626}, {48, 122, -33}, },
            {{45, 122, -570}, },
            {{45, 68, -31}, {69, 69, 627}, {70, 100, -31}, {101, 101, 628}, {102, 122, 91}, },
            {{45, 122, -572}, },
            {{45, 81, -125}, {82, 82, 629}, {83, 113, -125}, {114, 114, 630}, {115, 122, 91}, },
            {{45, 122, -574}, },
            {{45, 84, -30}, {85, 85, 631}, {86, 116, -30}, {117, 117, 632}, {118, 122, 91}, },
            {{45, 122, -576}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 633}, {79, 109, -106}, {110, 110, 634}, {111, 122, 91}, },
            {{45, 122, -580}, },
            {{45, 77, -29}, {78, 78, 635}, {79, 109, -106}, {110, 110, 636}, {111, 122, 91}, },
            {{45, 122, -582}, },
            {{45, 82, -41}, {83, 83, 637}, {84, 114, -41}, {115, 115, 638}, {116, 122, 91}, },
            {{45, 122, -584}, },
            {{45, 83, -116}, {84, 84, 639}, {85, 115, -116}, {116, 116, 640}, {117, 122, 91}, },
            {{45, 122, -586}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -130}, {79, 79, 641}, {80, 110, -130}, {111, 111, 642}, {112, 122, 91}, },
            {{45, 122, -590}, },
            {{45, 71, -23}, {72, 72, 643}, {73, 103, -43}, {104, 104, 644}, {105, 122, 91}, },
            {{45, 122, -592}, },
            {{45, 77, -29}, {78, 78, 645}, {79, 109, -106}, {110, 110, 646}, {111, 122, 91}, },
            {{45, 122, -594}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 77, -29}, {78, 78, 647}, {79, 109, -106}, {110, 110, 648}, {111, 122, 91}, },
            {{45, 122, -600}, },
            {{45, 68, -31}, {69, 69, 649}, {70, 100, -31}, {101, 101, 650}, {102, 122, 91}, },
            {{45, 122, -602}, },
            {{45, 83, -116}, {84, 84, 651}, {85, 115, -116}, {116, 116, 652}, {117, 122, 91}, },
            {{45, 122, -604}, },
            {{45, 77, -29}, {78, 78, 653}, {79, 109, -106}, {110, 110, 654}, {111, 122, 91}, },
            {{45, 122, -606}, },
            {{45, 72, -22}, {73, 73, 655}, {74, 104, -28}, {105, 105, 656}, {106, 122, 91}, },
            {{45, 122, -608}, },
            {{45, 45, 657}, {48, 122, -33}, },
            {{45, 122, -610}, },
            {{45, 75, -21}, {76, 76, 658}, {77, 107, -27}, {108, 108, 659}, {109, 122, 91}, },
            {{45, 122, -612}, },
            {{45, 77, -29}, {78, 78, 660}, {79, 109, -106}, {110, 110, 661}, {111, 122, 91}, },
            {{45, 122, -614}, },
            {{45, 75, -21}, {76, 76, 662}, {77, 107, -27}, {108, 108, 663}, {109, 122, 91}, },
            {{45, 122, -616}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 664}, {70, 100, -31}, {101, 101, 665}, {102, 122, 91}, },
            {{45, 122, -620}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 84, -30}, {85, 85, 666}, {86, 116, -30}, {117, 117, 667}, {118, 122, 91}, },
            {{45, 122, -624}, },
            {{45, 75, -21}, {76, 76, 668}, {77, 107, -27}, {108, 108, 669}, {109, 122, 91}, },
            {{45, 122, -626}, },
            {{45, 67, -134}, {68, 68, 670}, {69, 99, -134}, {100, 100, 671}, {101, 122, 91}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -125}, {82, 82, 672}, {83, 113, -125}, {114, 114, 673}, {115, 122, 91}, },
            {{45, 122, -633}, },
            {{45, 68, -31}, {69, 69, 674}, {70, 100, -31}, {101, 101, 675}, {102, 122, 91}, },
            {{45, 122, -635}, },
            {{45, 66, -102}, {67, 67, 676}, {68, 98, -102}, {99, 99, 677}, {100, 122, 91}, },
            {{45, 122, -637}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 678}, {70, 100, -31}, {101, 101, 679}, {102, 122, 91}, },
            {{45, 122, -641}, },
            {{45, 77, -29}, {78, 78, 680}, {79, 109, -106}, {110, 110, 681}, {111, 122, 91}, },
            {{45, 122, -643}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -132}, {71, 71, 682}, {72, 102, -132}, {103, 103, 683}, {104, 122, 91}, },
            {{45, 122, -647}, },
            {{45, 70, -132}, {71, 71, 684}, {72, 102, -132}, {103, 103, 685}, {104, 122, 91}, },
            {{45, 122, -649}, },
            {{45, 81, -125}, {82, 82, 686}, {83, 113, -125}, {114, 114, 687}, {115, 122, 91}, },
            {{45, 122, -651}, },
            {{45, 72, -22}, {73, 73, 688}, {74, 104, -28}, {105, 105, 689}, {106, 122, 91}, },
            {{45, 122, -653}, },
            {{45, 70, -132}, {71, 71, 690}, {72, 102, -132}, {103, 103, 691}, {104, 122, 91}, },
            {{45, 122, -655}, },
            {{45, 77, -29}, {78, 78, 692}, {79, 109, -106}, {110, 110, 693}, {111, 122, 91}, },
            {{45, 122, -657}, },
            {{45, 48, -440}, {49, 49, 694}, {50, 57, 97}, {65, 122, -16}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 695}, {48, 122, -33}, },
            {{45, 122, -662}, },
            {{45, 84, -30}, {85, 85, 696}, {86, 116, -30}, {117, 117, 697}, {118, 122, 91}, },
            {{45, 122, -664}, },
            {{45, 67, -134}, {68, 68, 698}, {69, 99, -134}, {100, 100, 699}, {101, 122, 91}, },
            {{45, 122, -666}, },
            {{45, 68, -31}, {69, 69, 700}, {70, 100, -31}, {101, 101, 701}, {102, 122, 91}, },
            {{45, 122, -668}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 68, -31}, {69, 69, 702}, {70, 100, -31}, {101, 101, 703}, {102, 122, 91}, },
            {{45, 122, -672}, },
            {{45, 68, -31}, {69, 69, 704}, {70, 100, -31}, {101, 101, 705}, {102, 122, 91}, },
            {{45, 122, -674}, },
            {{45, 82, -41}, {83, 83, 706}, {84, 114, -41}, {115, 115, 707}, {116, 122, 91}, },
            {{45, 122, -676}, },
            {{45, 68, -31}, {69, 69, 708}, {70, 100, -31}, {101, 101, 709}, {102, 122, 91}, },
            {{45, 122, -678}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 710}, {74, 104, -28}, {105, 105, 711}, {106, 122, 91}, },
            {{45, 122, -682}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -130}, {79, 79, 712}, {80, 110, -130}, {111, 111, 713}, {112, 122, 91}, },
            {{45, 122, -690}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 70, -132}, {71, 71, 714}, {72, 102, -132}, {103, 103, 715}, {104, 122, 91}, },
            {{45, 122, -694}, },
            {{45, 122, -33}, },
            {{45, 79, -117}, {80, 80, 716}, {81, 111, -170}, {112, 112, 717}, {113, 122, 91}, },
            {{45, 68, -31}, {69, 69, 718}, {70, 100, -31}, {101, 101, 719}, {102, 122, 91}, },
            {{45, 122, -698}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 82, -41}, {83, 83, 720}, {84, 114, -41}, {115, 115, 721}, {116, 122, 91}, },
            {{45, 122, -702}, },
            {{45, 66, -102}, {67, 67, 722}, {68, 98, -102}, {99, 99, 723}, {100, 122, 91}, },
            {{45, 122, -704}, },
            {{45, 45, 724}, {48, 122, -33}, },
            {{45, 122, -706}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 57, -21}, {65, 89, 89}, {90, 90, 725}, {95, 95, 90}, {97, 121, 91}, {122, 122, 726}, },
            {{45, 122, -712}, },
            {{45, 77, -29}, {78, 78, 727}, {79, 109, -106}, {110, 110, 728}, {111, 122, 91}, },
            {{45, 122, -714}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 78, -130}, {79, 79, 729}, {80, 110, -130}, {111, 111, 730}, {112, 122, 91}, },
            {{45, 122, -718}, },
            {{45, 82, -41}, {83, 83, 731}, {84, 114, -41}, {115, 115, 732}, {116, 122, 91}, },
            {{45, 122, -720}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 72, -22}, {73, 73, 733}, {74, 104, -28}, {105, 105, 734}, {106, 122, 91}, },
            {{45, 122, -724}, },
            {{45, 79, -117}, {80, 80, 735}, {81, 111, -170}, {112, 112, 736}, {113, 122, 91}, },
            {{45, 68, -31}, {69, 69, 737}, {70, 100, -31}, {101, 101, 738}, {102, 122, 91}, },
            {{45, 122, -727}, },
            {{45, 57, -21}, {65, 65, 739}, {66, 95, -42}, {97, 97, 740}, {98, 122, 91}, },
            {{45, 122, -729}, },
            {{45, 72, -22}, {73, 73, 741}, {74, 104, -28}, {105, 105, 742}, {106, 122, 91}, },
            {{45, 122, -731}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 76, -113}, {77, 77, 743}, {78, 108, -113}, {109, 109, 744}, {110, 122, 91}, },
            {{45, 122, -735}, },
            {{45, 78, -130}, {79, 79, 745}, {80, 110, -130}, {111, 111, 746}, {112, 122, 91}, },
            {{45, 122, -737}, },
            {{45, 67, -134}, {68, 68, 747}, {69, 99, -134}, {100, 100, 748}, {101, 122, 91}, },
            {{45, 122, -739}, },
            {{45, 75, -21}, {76, 76, 749}, {77, 107, -27}, {108, 108, 750}, {109, 122, 91}, },
            {{45, 122, -741}, },
            {{45, 77, -29}, {78, 78, 751}, {79, 109, -106}, {110, 110, 752}, {111, 122, 91}, },
            {{45, 122, -743}, },
            {{45, 57, -21}, {65, 65, 753}, {66, 95, -42}, {97, 97, 754}, {98, 122, 91}, },
            {{45, 122, -745}, },
            {{45, 72, -22}, {73, 73, 755}, {74, 104, -28}, {105, 105, 756}, {106, 122, 91}, },
            {{45, 122, -747}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 45, 757}, {48, 122, -33}, },
            {{45, 122, -751}, },
            {{45, 83, -116}, {84, 84, 758}, {85, 115, -116}, {116, 116, 759}, {117, 122, 91}, },
            {{45, 122, -753}, },
            {{45, 75, -21}, {76, 76, 760}, {77, 107, -27}, {108, 108, 761}, {109, 122, 91}, },
            {{45, 122, -755}, },
            {{45, 77, -29}, {78, 78, 762}, {79, 109, -106}, {110, 110, 763}, {111, 122, 91}, },
            {{45, 122, -757}, },
            {{45, 48, -440}, {49, 49, 764}, {50, 50, 765}, {51, 51, 766}, {52, 52, 767}, {53, 53, 768}, {54, 54, 769}, {55, 122, -440}, },
            {{45, 68, -31}, {69, 69, 770}, {70, 100, -31}, {101, 101, 771}, {102, 122, 91}, },
            {{45, 122, -760}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 83, -116}, {84, 84, 772}, {85, 115, -116}, {116, 116, 773}, {117, 122, 91}, },
            {{45, 122, -764}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -125}, {82, 82, 774}, {83, 113, -125}, {114, 114, 775}, {115, 122, 91}, },
            {{45, 122, -772}, },
            {{45, 68, -31}, {69, 69, 776}, {70, 100, -31}, {101, 101, 777}, {102, 122, 91}, },
            {{45, 122, -774}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
            {{45, 81, -125}, {82, 82, 778}, {83, 113, -125}, {114, 114, 779}, {115, 122, 91}, },
            {{45, 122, -778}, },
            {{45, 122, -33}, },
            {{45, 122, -33}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {14, 80, 0, 0, 0, 0, 80, 8, 80, 9, 10, 7, 5, 3, 6, 2, 4, 12, 12, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 0, 0, 0, 0, 0, -1, -1, -1, 13, -1, -1, -1, 13, -1, 1, 1, -1, 14, 79, 14, 79, 79, 79, 16, 14, 15, 12, 11, 79, 79, 79, 79, 79, 79, 79, 79, 79, 23, 79, 79, 23, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 45, 79, 45, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 56, 79, 79, 56, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 72, 79, 79, 79, 72, 79, 79, 79, 79, 79, 79, 79, -1, -1, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 18, 18, 19, 19, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 47, 47, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 58, 58, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, -1, -1, -1, -1, -1, -1, 79, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 79, 79, 79, 79, 79, 79, 79, 79, 25, 25, 32, 32, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 46, 46, 79, 79, 49, 49, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 67, 67, 79, 79, 69, 69, 79, 70, 79, 70, 79, 79, 79, 79, 79, 79, 79, 79, 77, 77, -1, -1, -1, -1, -1, -1, 78, 78, 13, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, 79, 79, 79, 79, 22, 22, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 43, 43, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 53, 53, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 65, 65, 79, 79, 68, 68, 79, 79, 79, 79, 71, 71, 79, 79, 74, 74, 75, 75, 13, 13, 79, 78, 79, 78, 13, -1, 13, -1, 79, 79, 21, 21, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 38, 38, 39, 39, 79, 79, 41, 41, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 52, 52, 54, 54, 55, 55, 79, 79, 79, 79, 79, 79, 79, 79, 61, 61, 79, 79, 79, 79, 79, 79, 79, 79, 68, 68, 79, 79, 79, 79, 79, 79, 76, 76, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 35, 35, 79, 79, 79, 79, 79, 79, 44, 44, 79, 79, 48, 48, 79, 79, 79, 79, 79, 58, 58, 59, 59, 79, 79, 79, 79, 79, 79, 64, 64, 79, 79, 79, 79, 70, 70, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 37, 37, 79, 79, 79, 79, 79, 79, 79, 79, 51, 51, 79, 79, 79, 79, 79, 79, 79, 79, 66, 66, 79, 79, 73, 73, 20, 20, 24, 24, 79, 79, 33, 33, 79, 79, 36, 79, 79, 79, 46, 46, 50, 50, 79, 79, 79, 79, 62, 62, 63, 63, 79, 79, 79, 79, 34, 34, 79, 79, 42, 42, 50, 50, 79, 79, 79, 79, 79, 79, 79, 79, 79, 42, 42, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 69, 69, 25, 25, 79, 79, 79, 79, 79, 79, 79, 79, 79, 57, 57, 79, 79, 26, 27, 28, 29, 30, 31, 79, 79, 79, 79, 40, 40, 79, 79, 60, 60, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
